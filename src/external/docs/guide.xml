This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed, content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: README.md, **/*.ts
- Files matching these patterns are excluded: src/external/
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/
  types/
    source_map_parser_node.d.ts
  cachingFetch.ts
  main.ts
  memoryCacheManager.ts
  parser.ts
  server.ts
tests/
  client.test.ts
  issue-21-fix.test.ts
  memoryCacheManager.test.ts
  sourcemap-issue.test.ts
  sourcemap-local.test.ts
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="tests/issue-21-fix.test.ts">
import { describe, it, expect } from 'vitest';
import Parser from '../src/parser.js';
import fs from 'fs/promises';
import path from 'path';
⋮----
// Read the local source map file mentioned in the issue
⋮----
// Test the exact stack traces from the issue
⋮----
// Verify the token structure is correct
⋮----
// Verify sourceCode array contains SourceCode objects with correct structure
⋮----
// Use the local source map file for consistent results
⋮----
// For file:// URLs, we expect fetch to fail, which is OK
</file>

<file path="src/types/source_map_parser_node.d.ts">
export function init(): Promise<void>;
export function generate_token_by_single_stack(
    line: number,
    column: number,
    sourceMap: string,
    contextOffset?: number
  ): string;
// Add other functions from the package as needed
export function lookup_token(
    sourceMap: string,
    line: number,
    column: number
  ): string;
export function lookup_token_with_context(
    sourceMap: string,
    line: number,
    column: number,
    contextLines: number
  ): string;
export function map_error_stack(
    sourceMap: string,
    errorStack: string,
    contextLines?: number
  ): string;
</file>

<file path="src/cachingFetch.ts">
import MemoryCacheManager from './memoryCacheManager';
// Read cache size from environment variable or use default value
⋮----
// Global cache manager instance with size from environment variable
⋮----
maxSize: cacheSizeMB // Size in MB
⋮----
/**
 * Enhanced fetch function that supports ETag-based memory caching
 * @param url Request URL
 * @param options Fetch options
 * @returns Promise<Response>
 */
export async function cachingFetch(
  url: string,
  options: RequestInit = {}
): Promise<Response>
⋮----
// Only cache GET requests
⋮----
// Try to get cache entry
⋮----
// If there is a cache, add If-None-Match header
⋮----
// Send request
⋮----
// Handle 304 Not Modified response
⋮----
// Create new response from cache
⋮----
// If the response is successful and has an ETag header, cache the response
⋮----
// Also export the cache manager to allow access to cache statistics or manual cache clearing when needed
⋮----
// Export the enhanced fetch function
</file>

<file path="src/main.ts">
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import server from './server';
export const stdio = async () =>
</file>

<file path="src/memoryCacheManager.ts">
// Cache entry type
interface CacheEntry {
  url: string;
  etag: string;
  data: Buffer;
  size: number;
  lastAccessed: number;
}
// Cache configuration interface
interface CacheConfig {
  /** 
   * Maximum cache size in MB
   * 
   * @description 
   * Default is 200MB.
   *  */
  maxSize?: number;
}
⋮----
/** 
   * Maximum cache size in MB
   * 
   * @description 
   * Default is 200MB.
   *  */
⋮----
// Memory cache manager
class MemoryCacheManager
⋮----
private readonly maxSize: number; // Maximum cache size in bytes
constructor(config: CacheConfig =
⋮----
// Default to 200MB if not specified
this.maxSize = (config.maxSize || 200) * 1024 * 1024; // 200MB in bytes
⋮----
// Get cache entry
public get(url: string): CacheEntry | null
⋮----
// Update last accessed time
⋮----
// Set cache entry
public set(url: string, data: Buffer, etag: string): void
⋮----
// If adding a new entry would exceed the maximum cache size, clean up space first
⋮----
// If entry already exists, update the cache size first
⋮----
// Create new cache entry
⋮----
// Save to memory
⋮----
// Clean up cache to free up space
private cleanup(neededSpace: number): void
⋮----
// If a single request already exceeds the maximum cache size, it cannot be cached
⋮----
// Sort by last accessed time
⋮----
// Remove oldest entries until there is enough space
⋮----
// Get current cache size information
public getStats():
// Clear cache
public clear(): void
</file>

<file path="src/parser.ts">
import fetch from './cachingFetch'
interface Stack {
  /** Line number in the stack trace */
  line: number;
  /** Column number in the stack trace */
  column: number;
  /** URL of the source map file */
  sourceMapUrl: string;
}
⋮----
/** Line number in the stack trace */
⋮----
/** Column number in the stack trace */
⋮----
/** URL of the source map file */
⋮----
interface SourceCode {
  /** Line number in the source code */
  line: number;
  /** Whether this line is part of the error stack trace */
  isStackLine: boolean;
  /** Raw code of the corresponding line */
  raw: string;
}
⋮----
/** Line number in the source code */
⋮----
/** Whether this line is part of the error stack trace */
⋮----
/** Raw code of the corresponding line */
⋮----
interface Token {
  /** Line number in the source map */
  line: number;
  /** Column number in the source map */
  column: number;
  /** Contextual source code lines */
  sourceCode: SourceCode[];
  /** File path of the source map */
  src: string;
}
⋮----
/** Line number in the source map */
⋮----
/** Column number in the source map */
⋮----
/** Contextual source code lines */
⋮----
/** File path of the source map */
⋮----
type BatchParseResult = Array<{
  /** Indicates a failed parsing result */
  success: false;
  /** Error object describing the failure */
  error: Error;
} | {
  /** Indicates a successful parsing result */
  success: true;
  /** Parsed token object */
  token: Token;
}>;
⋮----
/** Indicates a failed parsing result */
⋮----
/** Error object describing the failure */
⋮----
/** Indicates a successful parsing result */
⋮----
/** Parsed token object */
⋮----
const arrayBufferToString = (buffer: ArrayBuffer): string =>
/**
 * Validates a URL to prevent SSRF attacks
 * @param url - The URL to validate
 * @throws Error if the URL is invalid or potentially malicious
 */
const validateUrl = (url: string): void =>
⋮----
// Allow only HTTP and HTTPS protocols
⋮----
// Optional: Add domain allowlist/blocklist here if needed
// Example: if (parsedUrl.hostname.endsWith('.internal.company.com')) {
//   throw new Error('Access to internal domains is not allowed');
// }
⋮----
class Parser
⋮----
/** Indicates whether the parser has been initialized */
⋮----
/** Context offset line for source code */
⋮----
constructor(config: {
    /** Context offset line for source code */
    contextOffsetLine?: number;
} =
⋮----
/** Context offset line for source code */
⋮----
/**
   * Initializes the parser by loading necessary dependencies.
   * This method ensures initialization is performed only once.
   */
private async init()
/**
   * Fetches the content of a source map file from a given URL.
   * 
   * @param url - The URL of the source map file.
   * @returns The content of the source map file as a string.
   * @throws An error if the fetch operation fails or URL is invalid.
   * 
   * @todo Add caching for fetched source maps.
   */
private async fetchSourceMapContent(url: string)
⋮----
// Validate URL to prevent SSRF attacks
⋮----
/**
   * Parses an array of stack trace objects and returns the results in batch.
   * 
   * @param stackArr - An array of stack trace objects to parse.
   * @returns A batch parse result containing success or failure for each stack trace.
   */
public async batchParseStack(stackArr: Stack[]): Promise<BatchParseResult>
⋮----
// Ensure initialization is complete
⋮----
// Step 1: Get all necessary source map contents, eliminating duplicates
⋮----
// Fetch all unique source maps in parallel
⋮----
// Step 2: Generate tokens using the fetched source map contents
⋮----
// If source map fetch failed, return an error directly
⋮----
// Use the fetched source map content
⋮----
// Use the dedicated method to get the token
⋮----
/**
   * Parses a single stack trace object and returns the corresponding token.
   * 
   * @param stack - The stack trace object to parse.
   * @returns A parsed token object.
   */
public async parseStack(stack: Stack): Promise<Token>
/**
   * Validates that the parsed token matches the expected Token interface
   * @param token - The parsed token object to validate
   * @throws Error if the token doesn't match the expected structure
   */
private validateToken(token: any): asserts token is Token
⋮----
// Validate each source code entry
⋮----
/**
   * Transforms the raw response from WebAssembly module to match the expected Token interface
   * @param rawToken - The raw token object from WebAssembly (uses snake_case)
   * @returns Transformed token object matching the Token interface (uses camelCase)
   */
private transformToken(rawToken: any): Token
/**
   * Retrieves the source token for a given line and column in the source map.
   * 
   * @param line - The line number in the source map.
   * @param column - The column number in the source map.
   * @param sourceMap - The content of the source map file.
   * @returns A parsed token object.
   * @throws An error if the token generation fails.
   */
public async getSourceToken(line: number, column: number, sourceMap: string): Promise<Token>
⋮----
// Transform the raw token to match the expected interface
⋮----
// Validate the token structure
</file>

<file path="src/server.ts">
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";
import packageJson from "../package.json";
import Parser from "./parser";
import fs from 'node:fs/promises';
import path from 'node:path';
⋮----
// Sanitize error messages to avoid exposing internal details
</file>

<file path="tests/client.test.ts">
import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';
import { afterAll, beforeAll, expect, test } from 'vitest';
</file>

<file path="tests/memoryCacheManager.test.ts">
import { describe, it, expect, beforeEach } from 'vitest';
import MemoryCacheManager from '../src/memoryCacheManager';
⋮----
cache = new MemoryCacheManager({ maxSize: 1 }); // 1MB for testing
⋮----
// Wait a bit and get again
⋮----
// maxSize = 1MB, each buffer is 600KB
⋮----
cache.set('b', bufB, 'etag-b'); // should evict 'a'
⋮----
const bigBuf = Buffer.alloc(2 * 1024 * 1024, 1); // 2MB
</file>

<file path="tests/sourcemap-issue.test.ts">
import { describe, it, expect } from 'vitest';
import Parser from '../src/parser.js';
⋮----
// If it fails due to network issues, that's OK for now
</file>

<file path="tests/sourcemap-local.test.ts">
import { describe, it, expect } from 'vitest';
import Parser from '../src/parser.js';
import fs from 'fs/promises';
import path from 'path';
⋮----
// Read the local source map file
⋮----
// Use the getSourceToken method directly to test the parsing
</file>

<file path="README.md">
[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/masonchow-source-map-parser-mcp-badge.png)](https://mseep.ai/app/masonchow-source-map-parser-mcp)

# Source Map Parser

🌐 **语言**: [English](README.md) | [简体中文](README.zh-CN.md)

[![Node Version](https://img.shields.io/node/v/source-map-parser-mcp)](https://nodejs.org)
[![npm](https://img.shields.io/npm/v/source-map-parser-mcp.svg)](https://www.npmjs.com/package/source-map-parser-mcp)
[![Downloads](https://img.shields.io/npm/dm/source-map-parser-mcp)](https://npmjs.com/package/source-map-parser-mcp)
[![Build Status](https://github.com/MasonChow/source-map-parser-mcp/actions/workflows/ci.yml/badge.svg)](https://github.com/MasonChow/source-map-parser-mcp/actions)
[![codecov](https://codecov.io/gh/MasonChow/source-map-parser-mcp/graph/badge.svg)](https://codecov.io/gh/MasonChow/source-map-parser-mcp)
![](https://badge.mcpx.dev?type=server&features=tools 'MCP server with tools')

<a href="https://glama.ai/mcp/servers/@MasonChow/source-map-parser-mcp">
  <img width="380" height="200" src="https://glama.ai/mcp/servers/@MasonChow/source-map-parser-mcp/badge" />
</a>

This project implements a WebAssembly-based Source Map parser that can map JavaScript error stack traces back to source code and extract relevant context information. Developers can easily map JavaScript error stack traces back to source code for quick problem identification and resolution. This documentation aims to help developers better understand and use this tool.

## MCP Integration

> Note: Requires Node.js 18+ support

Option 1: Run directly with NPX

```bash
npx -y source-map-parser-mcp@latest
```

Option 2: Download the build artifacts

Download the corresponding version of the build artifacts from the [GitHub Release](https://github.com/MasonChow/source-map-parser-mcp/releases) page, then run:

```bash
node dist/main.es.js
```

### Runtime Parameter Configuration

> System runtime parameters can be flexibly configured through environment variables to meet the needs of different scenarios

- `SOURCE_MAP_PARSER_RESOURCE_CACHE_MAX_SIZE`: Sets the maximum memory space occupied by resource cache, default is 200MB. Adjusting this value appropriately can balance performance and memory usage.
- `SOURCE_MAP_PARSER_CONTEXT_OFFSET_LINE`: Defines the number of context code lines to display around the error location, default is 1 line. Increasing this value provides more context information, facilitating problem diagnosis.

**Example:**

```bash
# Set 500MB cache and display 3 lines of context
export SOURCE_MAP_PARSER_RESOURCE_CACHE_MAX_SIZE=500
export SOURCE_MAP_PARSER_CONTEXT_OFFSET_LINE=3
npx -y source-map-parser-mcp@latest
```

## Feature Overview

1. **Stack Parsing**: Parse the corresponding source code location based on provided line number, column number, and Source Map file.
2. **Batch Processing**: Support parsing multiple stack traces simultaneously and return batch results.
3. **Context Extraction**: Extract context code for a specified number of lines to help developers better understand the environment where errors occur.

## MCP Service Tool Description

### `operating_guide`

Get usage instructions for the MCP service. Provides information on how to use the MCP service through chat interaction.

### `parse_stack`

Parse stack information by providing stack traces and Source Map addresses.

#### Request Example

- stacks: Stack information including line number, column number, and Source Map address.
  - line: Line number, required.
  - column: Column number, required.
  - sourceMapUrl: Source Map address, required.

```json
{
  "stacks": [
    {
      "line": 10,
      "column": 5,
      "sourceMapUrl": "https://example.com/source.map"
    }
  ]
}
```

#### Response Example

```json
{
  "content": [
    {
      "type": "text",
      "text": "[{\"success\":true,\"token\":{\"line\":10,\"column\":5,\"sourceCode\":[{\"line\":8,\"isStackLine\":false,\"raw\":\"function foo() {\"},{\"line\":9,\"isStackLine\":false,\"raw\":\"  console.log('bar');\"},{\"line\":10,\"isStackLine\":true,\"raw\":\"  throw new Error('test');\"},{\"line\":11,\"isStackLine\":false,\"raw\":\"}\"}],\"src\":\"index.js\"}}]"
    }
  ]
}
```

### Parsing Result Description

- `success`: Indicates whether the parsing was successful.
- `token`: The Token object returned when parsing is successful, containing source code line number, column number, context code, and other information.
- `error`: Error information returned when parsing fails.

## Example Run

### System Prompt

According to actual needs, you can use system prompts to guide the model on how to parse stack information. For security or performance reasons, some teams may not want to expose Source Maps directly to the browser for parsing, but instead process the upload path of the Source Map. For example, converting the path `bar-special.js` to `special/bar.js.map`. In this case, you can instruct the model to perform path conversion through prompt rules.

Here is an example:

```markdown
# Error Stack Trace Parsing Rules

When performing source map parsing, please follow these rules:

1. If the URL contains `special`, the file should be parsed into the `special/` directory, while removing `-special` from the filename.
2. All source map files are stored in the following CDN directory:  
   `https://cdn.jsdelivr.net/gh/MasonChow/source-map-parser-mcp@main/example/`

## Examples

- Source map address for `bar-special.js`:  
  `https://cdn.jsdelivr.net/gh/MasonChow/source-map-parser-mcp@main/example/special/bar.js.map`
```

### Runtime Example

Error Stack

```
Uncaught Error: This is a error
    at foo-special.js:49:34832
    at ka (foo-special.js:48:83322)
    at Vs (foo-special.js:48:98013)
    at Et (foo-special.js:48:97897)
    at Vs (foo-special.js:48:98749)
    at Et (foo-special.js:48:97897)
    at Vs (foo-special.js:48:98059)
    at sv (foo-special.js:48:110550)
    at foo-special.js:48:107925
    at MessagePort.Ot (foo-special.js:25:1635)
```

![Runtime Example](https://cdn.jsdelivr.net/gh/MasonChow/source-map-parser-mcp@main/example/example_en.png)

## FAQ

### 1. WebAssembly Module Loading Failure

If the tool returns the following error message, please troubleshoot as follows:

> parser init error: WebAssembly.instantiate(): invalid value type 'externref', enable with --experimental-wasm-reftypes @+86

1. **Check Node.js Version**: Ensure Node.js version is 18 or higher. If it's lower than 18, please upgrade Node.js.
2. **Enable Experimental Flag**: If Node.js version is 18+ but you still encounter issues, use the following command to start the tool:
   ```bash
   npx --node-arg=--experimental-wasm-reftypes -y source-map-parser-mcp@latest
   ```

## Local Development Guide

### 1. Install Dependencies

Ensure Node.js and npm are installed, then run the following command to install project dependencies:

```bash
npm install
```

### 2. Link MCP Service

Run the following command to start the MCP server:

```bash
npx tsx src/main.ts
```

### Internal Logic Overview

#### 1. Main File Description

- **`stack_parser_js_sdk.js`**: JavaScript wrapper for the WebAssembly module, providing core stack parsing functionality.
- **`parser.ts`**: Main implementation of the parser, responsible for initializing the WebAssembly module, retrieving Source Map content, and parsing stack information.
- **`server.ts`**: Implementation of the MCP server, providing the `parse_stack` tool interface for external calls.

#### 2. Modify Parsing Logic

To modify the parsing logic, edit the `getSourceToken` method in the `parser.ts` file.

#### 3. Add New Tools

In the `server.ts` file, new tool interfaces can be added using the `server.tool` method.

## Notes

1. **Source Map Files**: Ensure that the provided Source Map file address is accessible and the file format is correct.
2. **Error Handling**: During parsing, network errors, file format errors, and other issues may be encountered; it's recommended to implement proper error handling when making calls.

## Contribution Guidelines

Contributions via Issues and Pull Requests are welcome to improve this project.

## License

This project is licensed under the MIT License. See the LICENSE file for details.
</file>

</files>
