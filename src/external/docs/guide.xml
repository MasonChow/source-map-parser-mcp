This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed, content has been compressed (code blocks are separated by ‚ãÆ---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: README.md, **/*.ts
- Files matching these patterns are excluded: src/external/
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Content has been compressed - code blocks are separated by ‚ãÆ---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
src/
  debug.ts
  main.ts
  parser.ts
  server.ts
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/debug.ts">
import parser from "./parser";
async function main()
</file>

<file path="src/main.ts">
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import server from './server';
const main = async () =>
</file>

<file path="src/parser.ts">
import { stackParserJsSdk } from './external/index.js';
interface Stack {
  /** Line number in the stack trace */
  line: number;
  /** Column number in the stack trace */
  column: number;
  /** URL of the source map file */
  sourceMapUrl: string;
}
‚ãÆ----
/** Line number in the stack trace */
‚ãÆ----
/** Column number in the stack trace */
‚ãÆ----
/** URL of the source map file */
‚ãÆ----
interface SourceCode {
  /** Line number in the source code */
  line: number;
  /** Whether this line is part of the error stack trace */
  isStackLine: boolean;
  /** Raw code of the corresponding line */
  raw: string;
}
‚ãÆ----
/** Line number in the source code */
‚ãÆ----
/** Whether this line is part of the error stack trace */
‚ãÆ----
/** Raw code of the corresponding line */
‚ãÆ----
interface Token {
  /** Line number in the source map */
  line: number;
  /** Column number in the source map */
  column: number;
  /** Contextual source code lines */
  sourceCode: SourceCode[];
  /** File path of the source map */
  src: string;
}
‚ãÆ----
/** Line number in the source map */
‚ãÆ----
/** Column number in the source map */
‚ãÆ----
/** Contextual source code lines */
‚ãÆ----
/** File path of the source map */
‚ãÆ----
type BatchParseResult = Array<{
  /** Indicates a failed parsing result */
  success: false;
  /** Error object describing the failure */
  error: Error;
} | {
  /** Indicates a successful parsing result */
  success: true;
  /** Parsed token object */
  token: Token;
}>;
‚ãÆ----
/** Indicates a failed parsing result */
‚ãÆ----
/** Error object describing the failure */
‚ãÆ----
/** Indicates a successful parsing result */
‚ãÆ----
/** Parsed token object */
‚ãÆ----
const arrayBufferToString = (buffer: ArrayBuffer): string =>
type WasmGenerateTokenBySingleStackFn = (
  line: number,
  column: number,
  sourceMap: string,
  contextOffsetLine?: number,
) => Promise<string>;
class Parser
‚ãÆ----
/** Indicates whether the parser has been initialized */
‚ãÆ----
/**
   * Initializes the parser by loading necessary dependencies.
   * This method ensures initialization is performed only once.
   */
private async init()
/**
   * Fetches the content of a source map file from a given URL.
   * 
   * @param url - The URL of the source map file.
   * @returns The content of the source map file as a string.
   * @throws An error if the fetch operation fails.
   * 
   * @todo Add caching for fetched source maps.
   */
private async fetchSourceMapContent(url: string)
/**
   * Parses an array of stack trace objects and returns the results in batch.
   * 
   * @param stackArr - An array of stack trace objects to parse.
   * @returns A batch parse result containing success or failure for each stack trace.
   */
public async batchParseStack(stackArr: Stack[], contextOffsetLine?: number): Promise<BatchParseResult>
/**
   * Parses a single stack trace object and returns the corresponding token.
   * 
   * @param stack - The stack trace object to parse.
   * @returns A parsed token object.
   */
public async praseStack(stack: Stack, contextOffsetLine?: number): Promise<Token>
/**
   * Retrieves the source token for a given line and column in the source map.
   * 
   * @param line - The line number in the source map.
   * @param column - The column number in the source map.
   * @param sourceMap - The content of the source map file.
   * @returns A parsed token object.
   * @throws An error if the token generation fails.
   */
public async getSourceToken(line: number, column: number, sourceMap: string, contextOffsetLine?: number): Promise<Token>
</file>

<file path="src/server.ts">
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";
import packageJson from "../package.json";
import parser from "./parser";
import fs from 'node:fs/promises';
import path from 'node:path';
</file>

<file path="README.md">
# Source Map Parser

üåê **Languages**: [English](README.md) | [ÁÆÄ‰Ωì‰∏≠Êñá](README.zh-CN.md)

This project implements a WebAssembly-based Source Map parser that maps JavaScript error stack traces back to the original source code and extracts relevant context information. Developers can easily locate and fix issues by mapping JavaScript error stack traces to the original source code. We hope this documentation helps developers better understand and use this tool.

## Features

1. **Stack Trace Parsing**: Parse the corresponding source code location based on the provided line number, column number, and Source Map file.
2. **Batch Parsing**: Support parsing multiple stack traces simultaneously and return batch results.
3. **Context Extraction**: Extract a specified number of context lines to help developers better understand the environment where the error occurred.

## MCP Service Tools

### `operating_guide`

Retrieve the usage guide for the MCP service. This tool provides an interactive way to understand how to use the MCP service.

### `parse_stack`

Parse stack trace information and Source Map URLs.

#### Request Example

- `stacks`: Stack trace information, including line number, column number, and Source Map URL.
  - `line`: Line number (required).
  - `column`: Column number (required).
  - `sourceMapUrl`: URL of the Source Map file (required).
- `ctxOffset`: Number of context lines (default is 5).

```json
{
  "stacks": [
    {
      "line": 10,
      "column": 5,
      "sourceMapUrl": "https://example.com/source.map"
    }
  ],
  "ctxOffset": 5
}
```

#### Response Example

```json
{
  "content": [
    {
      "type": "text",
      "text": "[{\"success\":true,\"token\":{\"line\":10,\"column\":5,\"sourceCode\":[{\"line\":8,\"isStackLine\":false,\"raw\":\"function foo() {\"},{\"line\":9,\"isStackLine\":false,\"raw\":\"  console.log('bar');\"},{\"line\":10,\"isStackLine\":true,\"raw\":\"  throw new Error('test');\"},{\"line\":11,\"isStackLine\":false,\"raw\":\"}\"}],\"src\":\"index.js\"}}]"
    }
  ]
}
```

### 4. Parsing Result Explanation

- `success`: Indicates whether the parsing was successful.
- `token`: The parsed token object returned upon successful parsing, including source code line number, column number, context code, etc.
- `error`: Error information returned when parsing fails.

## Local Development Guide

### 1. Install Dependencies

Ensure Node.js and npm are installed, then run the following command to install project dependencies:

```bash
npm install
```

### 2. Link MCP Service

Run the following command to start the MCP server:

```bash
npx tsx src/main.ts
```

### Internal Logic Overview

#### 1. Key Files

- **`stack_parser_js_sdk.js`**: JavaScript wrapper for the WebAssembly module, providing core functionality for stack trace parsing.
- **`parser.ts`**: Main implementation of the parser, responsible for initializing the WebAssembly module, fetching Source Map content, and parsing stack trace information.
- **`server.ts`**: Implementation of the MCP server, providing the `parse_stack` tool interface for external calls.

#### 2. Modify Parsing Logic

To modify the parsing logic, edit the `getSourceToken` method in the `parser.ts` file.

#### 3. Add New Tools

In the `server.ts` file, you can add new tool interfaces using the `server.tool` method.

## Notes

1. **Source Map Files**: Ensure the provided Source Map file URL is accessible and the file format is correct.
2. **Context Lines**: The `ctxOffset` parameter controls the number of context lines to extract. Adjust it based on your needs.
3. **Error Handling**: Parsing may encounter issues such as network errors or file format errors. It is recommended to handle errors appropriately when calling the tool.

## Contribution Guide

We welcome Issues and Pull Requests to improve this project together.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.
</file>

</files>
